// Question Link : https://leetcode.com/problems/stream-of-characters/submissions/


class StreamChecker {
public:
    int state=0;
    const static int K = 26;

    struct Vertex {
        int next[K];
        int leaf = 0;     // It actually denotes number of leafs reachable from current vertexes using links.
        int p = -1;
        char pch;
        int link = -1;
        int go[K];      

        Vertex(int p=-1, char ch='$') : p(p), pch(ch) {
            fill(begin(next), end(next), -1);
            fill(begin(go), end(go), -1);
        }
    };
    vector<Vertex> t;   // Automation is stored in form of vector. 

    void add_s(string const& s) {
        int v = 0;
        for (char ch : s) {
            int c = ch - 'a';
            if (t[v].next[c] == -1) {
                t[v].next[c] = t.size();
                t.emplace_back(v, ch);
            }
            v = t[v].next[c];
        }
        t[v].leaf += 1;
    }

    int get_link(int v) {
        if (t[v].link == -1) {
            if (v == 0 || t[v].p == 0)
                t[v].link = 0;
            else
                t[v].link = go(get_link(t[v].p), t[v].pch);
        }
        return t[v].link;
    }

    int go(int v, char ch) {
        int c = ch - 'a';
        if (t[v].go[c] == -1) {
            if (t[v].next[c] != -1)
                t[v].go[c] = t[v].next[c];
            else
                t[v].go[c] = v == 0 ? 0 : go(get_link(v), ch);
        }
        return t[v].go[c];
    } 

    void bfs() {
        queue<int> order;
        order.push(0);
        while(!order.empty()) {
            int cur = order.front(); order.pop();
            t[cur].link = get_link(cur);
            t[cur].leaf += t[t[cur].link].leaf;
            for(int i=0;i<K;++i) {
                if(t[cur].next[i] != -1) {
                    order.push(t[cur].next[i]);
                }
            }
        }
    }
    
    StreamChecker(vector<string>& words) {
        state=0;
        t.emplace_back(-1,'$');
        for(auto word : words) add_s(word);
        bfs();   // To calculate links and exit link for all nodes.
    }
    
    bool query(char letter) {
        state = go(state,letter);
        if(t[state].leaf) return true;
        return false;
    }
};
